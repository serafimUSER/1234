from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.markdown import link
import logging
import random
import config
import json


logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)



def get_sessions():
    with open(config.path, 'r') as file:
        json_data = json.loads(file.read())
    return json_data


def get_session(telegram_id: int) -> dict:
    with open(config.path, 'r') as file:
        json_data = json.loads(file.read())
    if str(telegram_id) not in json_data.keys():
        return None
    return json_data.get(str(telegram_id))


def write_session(telegram_id: int, username: str, status: int, user_id: int, id_code: int, users: int=0):
    sessions = get_sessions()
    sessions[str(telegram_id)] = {
        "username": username,
        "status": str(status),
        "user_id": str(user_id),
        "id_code": str(id_code),
        "users": str(users),
        'users_list': []
    }

    with open(config.path, 'w') as file:
        file.write(json.dumps(sessions, indent=4))


@dp.message_handler(commands=['top'])
async def top(message: types.Message):
    data = get_sessions()
    sorted_data = dict(sorted(data.items(), key=lambda x: int(x[1]['users'])))
    msg = ""
    num = 0
    for i in sorted_data:
        if num == 10:
            break
        msg += f"{num+1}. `{sorted_data[i]['username']}` - {sorted_data[i]['users']}\n"
        num += 1
    await bot.send_message(message.chat.id, msg[:-1], parse_mode='Markdown')


@dp.message_handler(commands=['wallet'])
async def wallet(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text="–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫. USDT\n\nüí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ *USDT*:", parse_mode='Markdown')
    sessions = get_sessions()
    sessions[str(message.chat.id)]['status'] = '-1'
    with open(config.path, 'w+') as f:
        f.write(json.dumps(sessions, indent=4))

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    session = get_session(message.chat.id)
    start_param = message.get_args()

    if start_param:
        sessions = get_sessions()
        for i in sessions:
            if sessions[i]['id_code'] == start_param and i != str(message.chat.id) and str(message.chat.id) not in sessions[i]['users_list']:
                users = int(sessions[i]['users'])
                sessions[i]['users'] = str(users+1)
                sessions[i]['users_list'].append(str(message.chat.id))

                with open(config.path, 'w') as file:
                    file.write(json.dumps(sessions, indent=4))
                break
    if session:
        if session['status'] == '1':
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="accept")
            )

            await bot.send_photo(chat_id=message.chat.id, photo=open('img/1.jpg', 'rb'), caption=f"üöÄ –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ $5000 USDT –æ—Ç Crypto drop - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É —á–∞—Ç—É\n\n{link('üöÄ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª Crypto drop', 'https://t.me/ccryptodrop18')}\n{link('üöÄ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç Crypto dropr', 'https://t.me/cryptodropchat1')}\n\n–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å`, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üëá", parse_mode='Markdown', reply_markup=markup)
            return
        if session['status'] == '2':
            text = f"""*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!*

–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ 50 –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç –Ω–∞ —Å—É–º–º—É $5000 USDT –æ—Ç Crypto drop!

–ü–µ—Ä–≤—ã–µ 50 –ø—Ä–∏–∑–æ–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ 50 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ USDT –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç 50 –ª—É—á—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π

–û—Å—Ç–∞–≤—à–∏–µ—Å—è 50 –º–µ—Å—Ç –±—É–¥—É—Ç —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ 12 –∞–≤–≥—É—Å—Ç–∞ üöÄ

ü•≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç –∏ –∫–∞–Ω–∞–ª –¥–∞–µ—Ç –≤–∞–º 1 –±–∏–ª–µ—Ç –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.

–í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: *{session['id_code']}*

–£–≤–µ–ª–∏—á—å—Ç–µ —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è! üëá"""
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(text="üöÄ –£–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã", callback_data="upp")
            )
            await bot.send_photo(chat_id=message.chat.id, photo=open('img/1.jpg', 'rb'), caption=text, parse_mode='Markdown', reply_markup=markup)
            return
        if session['status'] == '3':
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å üîÑ", callback_data="update")
            )
            await bot.send_photo(chat_id=message.chat.id, photo=open('img/1.jpg', 'rb'), caption=f"–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/cryptodrawusdtBot?start={session['id_code']}\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {session['users']}", parse_mode='Markdown', reply_markup=markup)
            return
    id_code = random.randint(10000, 99999)
    write_session(message.chat.id, message.from_user.username, 0, message.from_user.id, id_code)
    await bot.send_message(chat_id=message.chat.id, text="–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫. USDT\n\nüí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ *USDT*:", parse_mode='Markdown')


@dp.callback_query_handler(lambda call: call.data == 'accept')
async def answer(call: types.CallbackQuery, *args):
    user_id = get_session(call.message.chat.id)['user_id']
    user_channel_status_1 = await bot.get_chat_member(chat_id='-1001544129871', user_id=int(user_id))
    user_channel_status_2 = await bot.get_chat_member(chat_id='-1001911655784', user_id=int(user_id))

    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    if user_channel_status_1["status"] != 'left' and user_channel_status_2["status"] != 'left':
        await bot.answer_callback_query(call.id, text='‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö!', show_alert=True)
        sessions = get_sessions()
        sessions[str(call.message.chat.id)]['status'] = '2'
        with open(config.path, 'w+') as f:
            f.write(json.dumps(sessions, indent=4))
    else:
        await bot.answer_callback_query(call.id, text='üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', show_alert=True)
    await send_welcome(call.message)

@dp.callback_query_handler(lambda call: call.data == 'update')
async def answer(call: types.CallbackQuery, *args):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await send_welcome(call.message)

@dp.callback_query_handler(lambda call: call.data == 'upp')
async def answer(call: types.CallbackQuery, *args):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    sessions = get_sessions()
    sessions[str(call.message.chat.id)]['status'] = '3'
    with open(config.path, 'w+') as f:
        f.write(json.dumps(sessions, indent=4))
    await send_welcome(call.message)

@dp.message_handler()
async def echo(message: types.Message):
    session = get_session(message.chat.id)
    if session['status'] == '0' or session['status'] == '-1':
        sessions = get_sessions()
        sessions[str(message.chat.id)]['status'] = '1'
        with open(config.path, 'w+') as f:
            f.write(json.dumps(sessions, indent=4))
        await send_welcome(message)
        return

    await bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.. (^-^*)")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)